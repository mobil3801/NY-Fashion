# NY Fashion POS - Production Site Configuration
# React SPA with SSL termination, security headers, and caching

# HTTP to HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name nyfashion.com www.nyfashion.com;
    
    # Security headers for HTTP
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-XSS-Protection "1; mode=block";
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all HTTP to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name nyfashion.com www.nyfashion.com;
    
    # SSL Certificate configuration
    ssl_certificate /etc/letsencrypt/live/nyfashion.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nyfashion.com/privkey.pem;
    
    # SSL configuration
    include /etc/nginx/conf.d/ssl.conf;
    
    # Security headers
    include /etc/nginx/conf.d/security.conf;
    
    # Logging
    access_log /var/log/nginx/nyfashion_access.log main;
    error_log /var/log/nginx/nyfashion_error.log;
    
    # Document root
    root /var/www/nyfashion/dist;
    index index.html;
    
    # Rate limiting
    limit_req zone=general burst=20 nodelay;
    limit_conn conn_limit_per_ip 10;
    
    # Security: Block common attack patterns
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(htaccess|htpasswd|ini|log|sh|sql|conf)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # API endpoints (if you have backend API)
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials "true" always;
        
        if ($request_method = OPTIONS) {
            return 204;
        }
        
        # Proxy to backend (adjust as needed)
        proxy_pass http://127.0.0.1:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
    
    # Authentication endpoints with stricter rate limiting
    location ~ ^/(login|register|reset-password) {
        limit_req zone=auth burst=5 nodelay;
        try_files $uri $uri/ /index.html;
    }
    
    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
        
        # Optional: Enable CORS for fonts and assets
        location ~* \.(woff|woff2|ttf|eot)$ {
            add_header Access-Control-Allow-Origin "*";
        }
        
        # Gzip static files
        gzip_static on;
    }
    
    # Service worker
    location /sw.js {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
    }
    
    # Manifest and other PWA files
    location ~* \.(webmanifest|manifest\.json)$ {
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # React Router fallback - must be last
    location / {
        try_files $uri $uri/ /index.html;
        
        # Cache control for HTML
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Optional: WWW to non-WWW redirect
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name www.nyfashion.com;
    
    ssl_certificate /etc/letsencrypt/live/nyfashion.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/nyfashion.com/privkey.pem;
    include /etc/nginx/conf.d/ssl.conf;
    
    return 301 https://nyfashion.com$request_uri;
}